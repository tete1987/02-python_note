四、python函数
（一）函数的定义
1.定义
函数代码块以def关键词开头，后接函数标识符名称和圆括弧（）。
任何传入参数和自变量必须放在圆括弧中间，圆括弧直接可以用于定义参数。
函数的第一行语句可以选择性地使用文档字符串-用于放存函数说明。
函数内容以冒号起始，并且缩进。
return表达式结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回none。
示例：
def mathod(a):
    print(a)
    
mothod(1)    

增加return表达式：
def mathod(a):
    print(a)
    return a+2
    
print(mathod(1))   



（二）函数的各类参数
1.定义
1）必需参数
必需参数的含义就是，如果在函数内有参数，且我们在调用的过程中，没有给参数进行传参，就会报错。
2）默认参数
调用函数时，如果没有传递参数，则会使用默认参数。
默认参数在定义函数的时候定义。
默认值只会执行一次。这规则在默认值为可变对象时很重要。

示例：
def method(a,b=[]):
    b.append(a)
    return b
  
print(method(1))      
print(method(2))

2.函数的参数
1）关键字参数
kwarg=value形式，在调用函数时添加
在函数调用/定义中，关键字参数必须跟随在位置参数的后面。
当存在一个形式为**name的一个形参时，它会接收一个字典。
形式为*name，接收一个包含除了与已有形参列表以外的位置参数的元组的形参。

示例1：
def method(a,b):
    print(a)
    print(b)
    return b
    
print(method(a=1,b=2))   


示例2(传入字典)：
def method(**a):
    print(a.keys())
    
method(a=1,b=2,c=3)    


示例3（传入元组）：
def method(*a):
    print(a[0])
    print(a[1])
    print(a[2])
    print(a[3])

method(1,2,3,4)


3.特殊参数
* ：仅限关键字参数，在【仅限关键字】形参前放置一个 *
示例1：
def method(*,a):
    print(a)
    
method(a=1)    

注：
仅限关键字必须由显式的名称参数填充，不可使用位置参数填充。


4.解包参数列表
* ：用来解包元组
** ：用来解包字典

示例1（字典解包）：
def method(a,b,c):
    print(a)
    print(b)
    print(c)
    return a,b,c

dict1 = {"a":1,"b":2,"c":3}
print(method(**dict1))



（三）Lambda表达式
1.定义：
可以用lambda关键字来创建一个小的匿名函数。
关键字为lambda
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。

示例1：
y = lambda x:x+2

print(y(2))


示例2：
y = lambda x,y,z:x+y+z

print(y(2,3,4))

